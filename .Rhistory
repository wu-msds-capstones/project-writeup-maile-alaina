yes
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.preprocessing import LabelEncoder
# Load the dataset
df = pd.read_csv('/Users/alainaholland/Documents/Github/project-workbook-maile-alaina/Data/data_with_predictions2'')
# Encode categorical prognosis
le = LabelEncoder()
df['prognosis_encoded'] = le.fit_transform(df['prognosis'])
# Display the mapping of prognosis to encoded values
prognosis_mapping = dict(zip(le.classes_, le.transform(le.classes_)))
print(prognosis_mapping)
# Drop unnecessary columns
columns_to_drop = ['UniqueID', 'Source', 'predicted_values', 'match_found', 'rating']
X = df.drop(columns=columns_to_drop + ['prognosis', 'prognosis_encoded'])
y = df['prognosis_encoded']
# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8, random_state=31)
# Logistic Regression
log_reg = LogisticRegression()
log_reg.fit(X_train, y_train)
y_pred = log_reg.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
class_report = classification_report(y_test, y_pred)
print('Logistic Regression Accuracy:', accuracy)
print('Confusion Matrix:\n', conf_matrix)
print('Classification Report:\n', class_report)
