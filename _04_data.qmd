# Data
Our first dataset, the synthetic source, was sourced from a Disease Prediction Using Machine Learning on Kaggle.com, a data science competition platform and online community for data scientists and machine learning practitioners. The dataset comprises two primary CSV files—one for training and another for testing. Each file contains 133 columns, with 132 columns representing different symptoms experienced by patients, and the final column denoting the disease prognosis. This structure supports the development of models capable of predicting 42 distinct diseases based on the given symptoms.

## Content Breakdown
- **Columns**: The dataset includes 133 columns:
  - 132 columns representing various symptoms (e.g., itching, skin rash, continuous sneezing, joint pain).
  - 1 column for disease prognosis, indicating the disease corresponding to the symptoms.
- **Files**: The dataset comprises two files:
  - Training.csv: Used to train machine learning models.
  - Testing.csv: Used to evaluate the performance of the trained models.

## Data Augmentation
To understand how generative AI can impact prognosis diagnosing, we recognized that our original dataset was insufficient. Therefore, we augmented our data by comparing the accuracy between our initial dataset and generative AI outputs. We did this by making a series of API calls using OpenAI, with the AI acting as a virtual doctor.

## New Feature Creation
As mentioned prior due to the API calls, the following new features (columns) were created they include “Predicted Values”, and “Rating”. Based on these new features, we also created the following new “calculated columns” to determine a match between the original data and the generative AI data. These features include “match_found” and “match_found_family”. 

It was done in R by adding a new column to the dataset to check if there are any matching words between the prognosis and predicted values. This helps identify if the predicted prognosis contains any terms that appear in the actual prognosis.


ds2 = ds2 %>%
  mutate(match_found = mapply(function(x, y) {
    words1 <- str_split(x, " ")[[1]]
    words2 <- str_split(y, " ")[[1]]
    as.integer(any(words1 %in% words2))
  }, prognosis, predicted_values))
